<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Spreadsheet</name>
    </assembly>
    <members>
        <member name="T:SS.CircularException">
            <summary>
            Thrown to indicate that a change to a cell will cause a circular dependency.
            </summary>
        </member>
        <member name="T:SS.InvalidNameException">
            <summary>
            Thrown to indicate that a name parameter was either null or invalid.
            </summary>
        </member>
        <member name="T:SS.AbstractSpreadsheet">
            <summary>
            <para>An AbstractSpreadsheet object represents the state of a simple spreadsheet.  A 
            spreadsheet consists of an infinite number of named cells.</para>
            <para>A string is a valid cell name if and only if:
              (1) its first character is an underscore or a letter
              (2) its remaining characters (if any) are underscores and/or letters and/or digits
            Note that this is the same as the definition of valid variable from the Formula class.</para>
            <para>For example, "x", "_", "x2", "y_15", and "___" are all valid cell names, but
            "25", "2x", and other symbols.  Cell names are case sensitive, so "x" and "X" are
            different cell names.</para>
            <para>A spreadsheet contains a cell corresponding to every possible cell name.  (This
            means that a spreadsheet contains an infinite number of cells.)  In addition to 
            a name, each cell has a contents and a value.  The distinction is important.</para>
            <para>The contents of a cell can be (1) a string, (2) a double, or (3) a Formula.  If the
            contents is an empty string, we say that the cell is empty.  (By analogy, the contents
            of a cell in Excel is what is displayed on the editing line when the cell is selected.)</para>
            <para>In a new spreadsheet, the contents of every cell is the empty string.</para>
            <para>The value of a cell can be (1) a string, (2) a double, or (3) a FormulaError.  
            (By analogy, the value of an Excel cell is what is displayed in that cell's position
            in the grid.)</para>
            <para>If a cell's contents is a string, its value is that string.</para>
            <para>If a cell's contents is a double, its value is that double.</para>
            <para>If a cell's contents is a Formula, its value is either a double or a FormulaError,
            as reported by the Evaluate method of the Formula class.  The value of a Formula,
            of course, can depend on the values of variables.  The value of a variable is the 
            value of the spreadsheet cell it names (if that cell's value is a double) or 
            is undefined (otherwise).</para>
            <para>Spreadsheets are never allowed to contain a combination of Formulas that establish
            a circular dependency.  A circular dependency exists when a cell depends on itself.
            For example, suppose that A1 contains B1*2, B1 contains C1*2, and C1 contains A1*2.
            A1 depends on B1, which depends on C1, which depends on A1.  That's a circular
            dependency.</para>
            </summary>
        </member>
        <member name="M:SS.AbstractSpreadsheet.GetNamesOfAllNonemptyCells">
            <summary>
            Enumerates the names of all the non-empty cells in the spreadsheet.
            </summary>
        </member>
        <member name="M:SS.AbstractSpreadsheet.GetCellContents(System.String)">
            <summary>
            If name is null or invalid, throws an InvalidNameException.
            
            Otherwise, returns the contents (as opposed to the value) of the named cell.  The return
            value should be either a string, a double, or a Formula.
            </summary>
        </member>
        <member name="M:SS.AbstractSpreadsheet.SetCellContents(System.String,System.Double)">
            <summary>
            If name is null or invalid, throws an InvalidNameException.
            
            Otherwise, the contents of the named cell becomes number.  The method returns a
            list consisting of name plus the names of all other cells whose value depends, 
            directly or indirectly, on the named cell.
            
            For example, if name is A1, B1 contains A1*2, and C1 contains B1+A1, the
            list {A1, B1, C1} is returned.
            </summary>
        </member>
        <member name="M:SS.AbstractSpreadsheet.SetCellContents(System.String,System.String)">
            <summary>
            If text is null, throws an ArgumentNullException.
            
            Otherwise, if name is null or invalid, throws an InvalidNameException.
            
            Otherwise, the contents of the named cell becomes text.  The method returns a
            list consisting of name plus the names of all other cells whose value depends, 
            directly or indirectly, on the named cell.
            
            For example, if name is A1, B1 contains A1*2, and C1 contains B1+A1, the
            list {A1, B1, C1} is returned.
            </summary>
        </member>
        <member name="M:SS.AbstractSpreadsheet.SetCellContents(System.String,SpreadsheetUtilities.Formula)">
            <summary>
            If the formula parameter is null, throws an ArgumentNullException.
            
            Otherwise, if name is null or invalid, throws an InvalidNameException.
            
            Otherwise, if changing the contents of the named cell to be the formula would cause a 
            circular dependency, throws a CircularException, and no change is made to the spreadsheet.
            
            Otherwise, the contents of the named cell becomes formula.  The method returns a
            list consisting of name plus the names of all other cells whose value depends,
            directly or indirectly, on the named cell.
            
            For example, if name is A1, B1 contains A1*2, and C1 contains B1+A1, the
            list {A1, B1, C1} is returned.
            </summary>
        </member>
        <member name="M:SS.AbstractSpreadsheet.GetDirectDependents(System.String)">
            <summary>
            Returns an enumeration, without duplicates, of the names of all cells whose
            values depend directly on the value of the named cell.  In other words, returns
            an enumeration, without duplicates, of the names of all cells that contain
            formulas containing name.
            
            For example, suppose that
            A1 contains 3
            B1 contains the formula A1 * A1
            C1 contains the formula B1 + A1
            D1 contains the formula B1 - C1
            The direct dependents of A1 are B1 and C1
            </summary>
        </member>
        <member name="M:SS.AbstractSpreadsheet.GetCellsToRecalculate(System.Collections.Generic.ISet{System.String})">
            <summary>
            Requires that names be non-null.  Also requires that if names contains s,
            then s must be a valid non-null cell name.
            
            If any of the named cells are involved in a circular dependency,
            throws a CircularException.
            
            Otherwise, returns an enumeration of the names of all cells whose values must
            be recalculated, assuming that the contents of each cell named in names has changed.
            The names are enumerated in the order in which the calculations should be done.  
            
            For example, suppose that 
            A1 contains 5
            B1 contains 7
            C1 contains the formula A1 + B1
            D1 contains the formula A1 * C1
            E1 contains 15
            
            If A1 and B1 have changed, then A1, B1, and C1, and D1 must be recalculated,
            and they must be recalculated in either the order A1,B1,C1,D1 or B1,A1,C1,D1.
            The method will produce one of those enumerations.
            
            PLEASE NOTE THAT THIS METHOD DEPENDS ON THE ABSTRACT METHOD GetDirectDependents.
            IT WON'T WORK UNTIL GetDirectDependents IS IMPLEMENTED CORRECTLY.
            </summary>
        </member>
        <member name="M:SS.AbstractSpreadsheet.GetCellsToRecalculate(System.String)">
            <summary>
            A convenience method for invoking the other version of GetCellsToRecalculate
            with a singleton set of names.  See the other version for details.
            </summary>
        </member>
        <member name="M:SS.AbstractSpreadsheet.Visit(System.String,System.String,System.Collections.Generic.ISet{System.String},System.Collections.Generic.LinkedList{System.String})">
            <summary>
            A helper for the GetCellsToRecalculate() method that visits all the start cell and all of its dependents.
            It is a topological sort in that it adds the deepest cells from the starting cell of the dependency graph first to the beginning of changed List.
            Thus, the base starting cell ends up at the beginning and the deepest cells end up
            at the end of the list.
            </summary>
            <param name="start">The first cell is the cell that was input into the Visit() call in GetCellsToRecalculate()
            and it is the first cell that is visited.  The rest of its dependent cells are visted by recursion.</param>
            <param name="name">The current cell that is being visited</param>
            <param name="visited">The set of cells that have already been visited</param>
            <param name="changed">The list of cells whose values need to be recalculated in
            the order in which they need to be recalculated. The cells are ordered topologically. </param>
        </member>
        <member name="T:SS.Cell">
            <summary>
            A Cell object represents a non-empty cell in a spreadsheet and has two member variables: contents and value.  
            </summary>
        </member>
        <member name="F:SS.Cell.contents">
            <summary>
            <para>The input of the cell. </para> 
            It must be either a string, double, or Formula.
            It is private beacause contents of a cell should only be
            set by calling spreadsheets SetCellContents() method.
            </summary>
        </member>
        <member name="F:SS.Cell.value">
            <summary>
            <para>The value of the input of a cell.</para>
            It must be either a string, double, or FormulaError.
            
            If the cell's contents is a string, its value is that string.
            
            If the cell's contents is a double, its value is that double.
            
            If the cells contents is a formula, its value is the output of the evaluated formula.
            If the formula is evaluated and returns FormulaError, value is set to a FormulaError.  Otherwise, 
            the value of an input formula is a double.
            </summary>
        </member>
        <member name="M:SS.Cell.#ctor(System.String)">
            <summary>
            Instantiates a cell with string input.
            </summary>
            <param name="Contents">The String that was input into the cell.</param>
        </member>
        <member name="M:SS.Cell.#ctor(System.Double)">
            <summary>
            Instantiates a cell with type double input.
            </summary>
            <param name="Contents">The double number that was input into the cell.</param>
        </member>
        <member name="M:SS.Cell.#ctor(SpreadsheetUtilities.Formula)">
            <summary>
            Instantiates a cell with type Formula input.
            </summary>
            <param name="Contents">The formula that was input into the cell.</param>
        </member>
        <member name="P:SS.Cell.Contents">
            <summary>
            Returns the input of a cell.
            </summary>
        </member>
        <member name="M:SS.Cell.SetContents(System.Object)">
            <summary>
            Changes the contents of a cell to the given input.
            </summary>
            <param name="input">The input of a cell.  It must be a double, Formula, or String.</param>
        </member>
        <member name="T:SS.Spreadsheet">
            <inheritdoc/>
        </member>
        <member name="F:SS.Spreadsheet.spreadsheet">
            <summary>
            Maps the name of a cell to a Cell object.  The cell object holds the value and contents of a cell.
            It only maps cells whose contents have been set.  It does not hold they keys of empty cells.
            </summary>
        </member>
        <member name="F:SS.Spreadsheet.dg">
            <summary>
            Tracks the dependencies of the non-empty cells in spreadsheet in a DAG.
            If a cell "t" contents is set to a formula that contains a variable to another cell "s", then it is 
            said that "t" depends on "s". 
            </summary>
        </member>
        <member name="F:SS.Spreadsheet.IsValidName">
            <summary>
            Determines whether a string name for a variable meets standard variable name format.
            For example, "x", "_", "x2", "y_15", and "___" are all valid cell names, but
             "25", "2x", and other symbols are not.  Cell names are case sensitive, so "x" and "X" are
             different cell names.
            </summary>
        </member>
        <member name="M:SS.Spreadsheet.#ctor">
            <summary>
            Constructor creates an empty spreadsheet.
            </summary>
        </member>
        <member name="M:SS.Spreadsheet.GetCellContents(System.String)">
            <summary>
            If name is null or invalid, throws an InvalidNameException.
            
            Otherwise, returns the contents (as opposed to the value) of the named cell.  The return
            value should be either a string, a double, or a Formula.
            </summary>
        </member>
        <member name="M:SS.Spreadsheet.GetNamesOfAllNonemptyCells">
            <summary>
            Enumerates the names of all the non-empty cells in the spreadsheet.
            </summary>
        </member>
        <member name="M:SS.Spreadsheet.SetCellContents(System.String,System.Double)">
            <inheritdoc/>
            <param name="name">The name of the cell being changed</param>
            <param name="number">The contents that is input into the cell</param>
            <returns>A list of strings containing the names of all the cells that directly or indirectly depend on the value of 
            the cell being changed.  The cells are listed in the order that they need to be recalculated.</returns>
            <exception cref="T:SS.InvalidNameException">Is thrown if name is null or invalid.</exception>
        </member>
        <member name="M:SS.Spreadsheet.SetCellContents(System.String,System.String)">
            <inheritdoc/>
            <param name="name">The name of the cell whose contents is being set.</param>
            <param name="text">The string contents being input into the cell.</param>
            <returns>A list of strings containing the names of all the cells that directly or indirectly depend on the value of 
            the cell being changed.  The cells are listed in the order that they need to be recalculated.</returns>
            <exception cref="T:SS.InvalidNameException"></exception>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:SS.Spreadsheet.SetCellContents(System.String,SpreadsheetUtilities.Formula)">
            <inheritdoc/>
            /// <param name="name">The name of the cell whose contents is being set.</param>
            <param name="formula">The formula contents being input into the cell.</param>
            <returns>A list of strings containing the names of all the cells that directly or indirectly depend on the value of 
            the cell being changed.  The cells are listed in the order that they need to be recalculated.</returns>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:SS.InvalidNameException"></exception>
        </member>
        <member name="M:SS.Spreadsheet.GetDirectDependents(System.String)">
            <inheritdoc/>
            <param name="name">The name of the cell that is the dependee of all cells returned.</param>
            <returns>Enumeration of direct dependents of given cell</returns>
        </member>
    </members>
</doc>
