<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Spreadsheet</name>
    </assembly>
    <members>
        <member name="T:SS.CircularException">
            <summary>
            Thrown to indicate that a change to a cell will cause a circular dependency.
            </summary>
        </member>
        <member name="T:SS.InvalidNameException">
            <summary>
            Thrown to indicate that a name parameter was either null or invalid.
            </summary>
        </member>
        <member name="T:SS.SpreadsheetReadWriteException">
            <summary>
            Thrown to indicate that a read or write attempt has failed.
            </summary>
        </member>
        <member name="M:SS.SpreadsheetReadWriteException.#ctor(System.String)">
            <summary>
            Creates the exception with a message
            </summary>
        </member>
        <member name="T:SS.AbstractSpreadsheet">
            <summary>
            <para>An AbstractSpreadsheet object represents the state of a simple spreadsheet.  A 
            spreadsheet consists of an infinite number of named cells.</para>
            
            <para>A string is a cell name if and only if it consists of one or more letters,
            followed by one or more digits AND it satisfies the predicate IsValid.
            For example, "A15", "a15", "XY032", and "BC7" are cell names so long as they
            satisfy IsValid.  On the other hand, "Z", "X_", and "hello" are not cell names,
            regardless of IsValid.</para>
            
            <para>Any valid incoming cell name, whether passed as a parameter or embedded in a formula,
            must be normalized with the Normalize method before it is used by or saved in 
            this spreadsheet.  For example, if Normalize is s => s.ToUpper(), then
            the Formula "x3+a5" should be converted to "X3+A5" before use.</para>
            
            <para>A spreadsheet contains a cell corresponding to every possible cell name.  
            In addition to a name, each cell has a contents and a value.  The distinction is
            important.</para>
            
            <para>The contents of a cell can be (1) a string, (2) a double, or (3) a Formula.  If the
            contents is an empty string, we say that the cell is empty.  (By analogy, the contents
            of a cell in Excel is what is displayed on the editing line when the cell is selected.)</para>
            
            <para>In a new spreadsheet, the contents of every cell is the empty string.</para>
             
            <para>The value of a cell can be (1) a string, (2) a double, or (3) a FormulaError.  
            (By analogy, the value of an Excel cell is what is displayed in that cell's position
            in the grid.)</para>
            
            <para>If a cell's contents is a string, its value is that string.</para>
            
            <para>If a cell's contents is a double, its value is that double.</para>
            
            <para>If a cell's contents is a Formula, its value is either a double or a FormulaError,
            as reported by the Evaluate method of the Formula class.  The value of a Formula,
            of course, can depend on the values of variables.  The value of a variable is the 
            value of the spreadsheet cell it names (if that cell's value is a double) or 
            is undefined (otherwise).</para>
            
            <para>Spreadsheets are never allowed to contain a combination of Formulas that establish
            a circular dependency.  A circular dependency exists when a cell depends on itself.
            For example, suppose that A1 contains B1*2, B1 contains C1*2, and C1 contains A1*2.
            A1 depends on B1, which depends on C1, which depends on A1.  That's a circular
            dependency.</para>
            </summary>
        </member>
        <member name="P:SS.AbstractSpreadsheet.Changed">
            <summary>
            True if this spreadsheet has been modified since it was created or saved                  
            (whichever happened most recently); false otherwise.
            </summary>
        </member>
        <member name="P:SS.AbstractSpreadsheet.IsValid">
            <summary>
            Method used to determine whether a string that consists of one or more letters
            followed by one or more digits is a valid variable name.
            </summary>
        </member>
        <member name="P:SS.AbstractSpreadsheet.Normalize">
            <summary>
            Method used to convert a cell name to its standard form.  For example,
            Normalize might convert names to upper case.
            </summary>
        </member>
        <member name="P:SS.AbstractSpreadsheet.Version">
            <summary>
            Version information
            </summary>
        </member>
        <member name="M:SS.AbstractSpreadsheet.#ctor(System.Func{System.String,System.Boolean},System.Func{System.String,System.String},System.String)">
            <summary>
            Constructs an abstract spreadsheet by recording its variable validity test,
            its normalization method, and its version information.  The variable validity
            test is used throughout to determine whether a string that consists of one or
            more letters followed by one or more digits is a valid cell name.  The variable
            equality test should be used thoughout to determine whether two variables are
            equal.
            </summary>
        </member>
        <member name="M:SS.AbstractSpreadsheet.GetSavedVersion(System.String)">
            <summary>
            Returns the version information of the spreadsheet saved in the named file.
            If there are any problems opening, reading, or closing the file, the method
            should throw a SpreadsheetReadWriteException with an explanatory message.
            </summary>
        </member>
        <member name="M:SS.AbstractSpreadsheet.Save(System.String)">
            <summary>
            Writes the contents of this spreadsheet to the named file using an XML format.
            The XML elements should be structured as follows:
            
            <spreadsheet version="version information goes here">
            
            <cell>
            <name>cell name goes here</name>
            <contents>cell contents goes here</contents>    
            </cell>
            
            </spreadsheet>
            
            There should be one cell element for each non-empty cell in the spreadsheet.  
            If the cell contains a string, it should be written as the contents.  
            If the cell contains a double d, d.ToString() should be written as the contents.  
            If the cell contains a Formula f, f.ToString() with "=" prepended should be written as the contents.
            
            If there are any problems opening, writing, or closing the file, the method should throw a
            SpreadsheetReadWriteException with an explanatory message.
            </summary>
        </member>
        <member name="M:SS.AbstractSpreadsheet.GetCellValue(System.String)">
            <summary>
            If name is null or invalid, throws an InvalidNameException.
            
            Otherwise, returns the value (as opposed to the contents) of the named cell.  The return
            value should be either a string, a double, or a SpreadsheetUtilities.FormulaError.
            </summary>
        </member>
        <member name="M:SS.AbstractSpreadsheet.GetNamesOfAllNonemptyCells">
            <summary>
            Enumerates the names of all the non-empty cells in the spreadsheet.
            </summary>
        </member>
        <member name="M:SS.AbstractSpreadsheet.GetCellContents(System.String)">
            <summary>
            If name is null or invalid, throws an InvalidNameException.
            
            Otherwise, returns the contents (as opposed to the value) of the named cell.  The return
            value should be either a string, a double, or a Formula.
            </summary>
        </member>
        <member name="M:SS.AbstractSpreadsheet.SetContentsOfCell(System.String,System.String)">
            <summary>
            If content is null, throws an ArgumentNullException.
            
            Otherwise, if name is null or invalid, throws an InvalidNameException.
            
            Otherwise, if content parses as a double, the contents of the named
            cell becomes that double.
            
            Otherwise, if content begins with the character '=', an attempt is made
            to parse the remainder of content into a Formula f using the Formula
            constructor.  There are then three possibilities:
            
              (1) If the remainder of content cannot be parsed into a Formula, a 
                  SpreadsheetUtilities.FormulaFormatException is thrown.
                  
              (2) Otherwise, if changing the contents of the named cell to be f
                  would cause a circular dependency, a CircularException is thrown,
                  and no change is made to the spreadsheet.
                  
              (3) Otherwise, the contents of the named cell becomes f.
            
            Otherwise, the contents of the named cell becomes content.
            
            If an exception is not thrown, the method returns a list consisting of
            name plus the names of all other cells whose value depends, directly
            or indirectly, on the named cell. The order of the list should be any
            order such that if cells are re-evaluated in that order, their dependencies 
            are satisfied by the time they are evaluated.
            
            For example, if name is A1, B1 contains A1*2, and C1 contains B1+A1, the
            list {A1, B1, C1} is returned.
            </summary>
        </member>
        <member name="M:SS.AbstractSpreadsheet.SetCellContents(System.String,System.Double)">
            <summary>
            The contents of the named cell becomes number.  The method returns a
            list consisting of name plus the names of all other cells whose value depends, 
            directly or indirectly, on the named cell. The order of the list should be any
            order such that if cells are re-evaluated in that order, their dependencies 
            are satisfied by the time they are evaluated.
            
            For example, if name is A1, B1 contains A1*2, and C1 contains B1+A1, the
            list {A1, B1, C1} is returned.
            </summary>
        </member>
        <member name="M:SS.AbstractSpreadsheet.SetCellContents(System.String,System.String)">
            <summary>
            The contents of the named cell becomes text.  The method returns a
            list consisting of name plus the names of all other cells whose value depends, 
            directly or indirectly, on the named cell. The order of the list should be any
            order such that if cells are re-evaluated in that order, their dependencies 
            are satisfied by the time they are evaluated.
            
            For example, if name is A1, B1 contains A1*2, and C1 contains B1+A1, the
            list {A1, B1, C1} is returned.
            </summary>
        </member>
        <member name="M:SS.AbstractSpreadsheet.SetCellContents(System.String,SpreadsheetUtilities.Formula)">
            <summary>
            If changing the contents of the named cell to be the formula would cause a 
            circular dependency, throws a CircularException, and no change is made to the spreadsheet.
            
            Otherwise, the contents of the named cell becomes formula. The method returns a
            list consisting of name plus the names of all other cells whose value depends,
            directly or indirectly, on the named cell. The order of the list should be any
            order such that if cells are re-evaluated in that order, their dependencies 
            are satisfied by the time they are evaluated.
            
            For example, if name is A1, B1 contains A1*2, and C1 contains B1+A1, the
            list {A1, B1, C1} is returned.
            </summary>
        </member>
        <member name="M:SS.AbstractSpreadsheet.GetDirectDependents(System.String)">
            <summary>
            Returns an enumeration, without duplicates, of the names of all cells whose
            values depend directly on the value of the named cell.  In other words, returns
            an enumeration, without duplicates, of the names of all cells that contain
            formulas containing name.
            
            For example, suppose that
            A1 contains 3
            B1 contains the formula A1 * A1
            C1 contains the formula B1 + A1
            D1 contains the formula B1 - C1
            The direct dependents of A1 are B1 and C1
            </summary>
        </member>
        <member name="M:SS.AbstractSpreadsheet.GetCellsToRecalculate(System.Collections.Generic.ISet{System.String})">
            <summary>
            Requires that names be non-null.  Also requires that if names contains s,
            then s must be a valid non-null cell name.
            
            If any of the named cells are involved in a circular dependency,
            throws a CircularException.
            
            Otherwise, returns an enumeration of the names of all cells whose values must
            be recalculated, assuming that the contents of each cell named in names has changed.
            The names are enumerated in the order in which the calculations should be done.  
            
            For example, suppose that 
            A1 contains 5
            B1 contains 7
            C1 contains the formula A1 + B1
            D1 contains the formula A1 * C1
            E1 contains 15
            
            If A1 and B1 have changed, then A1, B1, and C1, and D1 must be recalculated,
            and they must be recalculated in either the order A1,B1,C1,D1 or B1,A1,C1,D1.
            The method will produce one of those enumerations.
            
            Please note that this method depends on the abstract GetDirectDependents.
            It won't work until GetDirectDependents is implemented correctly.
            </summary>
        </member>
        <member name="M:SS.AbstractSpreadsheet.GetCellsToRecalculate(System.String)">
            <summary>
            A convenience method for invoking the other version of GetCellsToRecalculate
            with a singleton set of names.  See the other version for details.
            </summary>
        </member>
        <member name="M:SS.AbstractSpreadsheet.Visit(System.String,System.String,System.Collections.Generic.ISet{System.String},System.Collections.Generic.LinkedList{System.String})">
            <summary>
            A helper for the GetCellsToRecalculate method.
            </summary>
        </member>
        <member name="T:SS.Cell">
            <summary>
            A Cell object represents a non-empty cell in a spreadsheet and has two member variables: contents and value.  
            </summary>
        </member>
        <member name="F:SS.Cell.contents">
            <summary>
            <para>The input of the cell. </para> 
            It must be either a string, double, or Formula.
            It is private beacause contents of a cell should only be
            set by calling spreadsheets SetCellContents() method.
            </summary>
        </member>
        <member name="F:SS.Cell.value">
            <summary>
            <para>The value of the input of a cell.</para>
            It must be either a string, double, or FormulaError.
            
            If the cell's contents is a string, its value is that string.
            
            If the cell's contents is a double, its value is that double.
            
            If the cells contents is a formula, its value is the output of the evaluated formula.
            If the formula is evaluated and returns FormulaError, value is set to a FormulaError.  Otherwise, 
            the value of an input formula is a double.
            </summary>
        </member>
        <member name="M:SS.Cell.#ctor(System.String)">
            <summary>
            Instantiates a cell with string input.
            </summary>
            <param name="Contents">The String that was input into the cell.</param>
        </member>
        <member name="M:SS.Cell.#ctor(System.Double)">
            <summary>
            Instantiates a cell with type double input.
            </summary>
            <param name="Contents">The double number that was input into the cell.</param>
        </member>
        <member name="M:SS.Cell.#ctor(SpreadsheetUtilities.Formula,System.Func{System.String,System.Double})">
            <summary>
            Instantiates a cell with type Formula input.
            </summary>
            <param name="Contents">The formula that was input into the cell.</param>
            <param name="Lookup"> Lookup method to return the value of a cell(variable) is defined in spreadsheet</param>
        </member>
        <member name="M:SS.Cell.Recalculate(System.Func{System.String,System.Double})">
            <summary>
            Recalculates value of a cell that contains a Formula
            </summary>
        </member>
        <member name="P:SS.Cell.Contents">
            <summary>
            Returns the input of a cell.
            </summary>
        </member>
        <member name="P:SS.Cell.Value">
            <summary>
            Returns the input of a cell.
            </summary>
        </member>
        <member name="M:SS.Cell.SetContents(System.Object)">
            <summary>
            Changes the contents of a cell to the given input.
            </summary>
            <param name="input">The input of a cell.  It must be a double, Formula, or String.</param>
        </member>
        <member name="T:SS.Spreadsheet">
            <inheritdoc/>
        </member>
        <member name="F:SS.Spreadsheet.spreadsheet">
            <summary>
            Maps the name of a cell to a Cell object.  The cell object holds the value and contents of a cell.
            It only maps cells whose contents have been set.  It does not hold they keys of empty cells.
            </summary>
        </member>
        <member name="F:SS.Spreadsheet.dg">
            <summary>
            Tracks the dependencies of the non-empty cells in spreadsheet in a DAG.
            If a cell "t" contents is set to a formula that contains a variable to another cell "s", then it is 
            said that "t" depends on "s". 
            </summary>
        </member>
        <member name="M:SS.Spreadsheet.#ctor">
            <summary>
            Constructor creates an empty spreadsheet.
            </summary>
        </member>
        <member name="M:SS.Spreadsheet.#ctor(System.Func{System.String,System.Boolean},System.Func{System.String,System.String},System.String)">
            <summary>
            Constructs an empty spreadsheet that has a variable normalizer and validator, as well as a version property.
            </summary>
            <param name="isValid">Method used to determine whether a string that consists of one or more letters
            followed by one or more digits is a valid variable name.</param>
            <param name="normalize">Method used to convert a cell name to its standard form.  For example,
            Normalize might convert names to upper case.</param>
            <param name="version">Version information</param>
        </member>
        <member name="M:SS.Spreadsheet.#ctor(System.String,System.Func{System.String,System.Boolean},System.Func{System.String,System.String},System.String)">
            <summary>
            Constructs a new spreadsheet by reading a saved spreadsheet that is passed in via filePath.
            The new spreadsheet should use the provided validity delegate, normalization delegate, and version.
            </summary>
            <param name="filePath">An XML file that repesents a saved spreadsheet</param>
            <param name="isValid">Method used to determine whether a string that consists of one or more letters
            followed by one or more digits is a valid variable name.</param>
            <param name="normalize">Method used to convert a cell name to its standard form.  For example,
            Normalize might convert names to upper case.</param>
            <param name="version">Version information</param>
        </member>
        <member name="M:SS.Spreadsheet.IsValidName(System.String)">
            <summary>
             Determines whether a string name for a variable meets standard variable name format as well as
             extra conditions set by the user passing in the IsValid delegate.
             
             baseCondition:  Variables for a Spreadsheet are only valid if they are one or more letters followed by 
             one or more digits (numbers). For example, "x", "x2", and "y15" are all valid cell names, but "25", "2x", "_", "y_15" and other 
             symbols are not.  Cell names are case sensitive, so "x" and "X" are different cell names.
             extraCondition: IsValid(x) method
            </summary>
        </member>
        <member name="P:SS.Spreadsheet.Changed">
             <inheritdoc/>
        </member>
        <member name="M:SS.Spreadsheet.GetCellContents(System.String)">
            <summary>
            If name is null or invalid, throws an InvalidNameException.
            
            Otherwise, returns the contents (as opposed to the value) of the named cell.  The return
            value should be either a string, a double, or a Formula.
            </summary>
            <param name="name">The name of the cell whose contents is needed.</param>
            <returns>The contents that was input into the cell.</returns>
        </member>
        <member name="M:SS.Spreadsheet.GetCellValue(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SS.Spreadsheet.GetNamesOfAllNonemptyCells">
            <summary>
            Enumerates the names of all the non-empty cells in the spreadsheet.
            </summary>
        </member>
        <member name="M:SS.Spreadsheet.GetSavedVersion(System.String)">
            <summary>
            Returns the version information of the spreadsheet saved in the named file.
            If there are any problems opening, reading, or closing the file, the method
            should throw a SpreadsheetReadWriteException with an explanatory message.
            </summary>
            <inheritdoc/>
        </member>
        <member name="M:SS.Spreadsheet.Save(System.String)">
            <summary>
            Writes the contents of this spreadsheet to the named file using an XML format.
            The XML elements should be structured as follows:
            
            <spreadsheet version="version information goes here">
            
            <cell>
            <name>cell name goes here</name>
            <contents>cell contents goes here</contents>    
            </cell>
            
            </spreadsheet>
            
            There should be one cell element for each non-empty cell in the spreadsheet.  
            If the cell contains a string, it should be written as the contents.  
            If the cell contains a double d, d.ToString() should be written as the contents.  
            If the cell contains a Formula f, f.ToString() with "=" prepended should be written as the contents.
            
            If there are any problems opening, writing, or closing the file, the method should throw a
            SpreadsheetReadWriteException with an explanatory message.
            </summary>
            <inheritdoc/>
            <param name="filename">The name where the file is saved</param>
        </member>
        <member name="M:SS.Spreadsheet.SetCellContents(System.String,System.Double)">
            <inheritdoc/>
            <param name="name">The name of the cell being changed</param>
            <param name="number">The contents that is input into the cell</param>
            <returns>A list of strings containing the names of all the cells that directly or indirectly depend on the value of 
            the cell being changed.  The cells are listed in the order that they need to be recalculated.</returns>
            <exception cref="T:SS.InvalidNameException">Is thrown if name is null or invalid.</exception>
        </member>
        <member name="M:SS.Spreadsheet.SetCellContents(System.String,System.String)">
            <inheritdoc/>
            <param name="name">The name of the cell whose contents is being set.</param>
            <param name="text">The string contents being input into the cell.</param>
            <returns>A list of strings containing the names of all the cells that directly or indirectly depend on the value of 
            the cell being changed.  The cells are listed in the order that they need to be recalculated.</returns>
            <exception cref="T:SS.InvalidNameException"></exception>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:SS.Spreadsheet.SetCellContents(System.String,SpreadsheetUtilities.Formula)">
            <inheritdoc/>
            /// <param name="name">The name of the cell whose contents is being set.</param>
            <param name="formula">The formula contents being input into the cell.</param>
            <returns>A list of strings containing the names of all the cells that directly or indirectly depend on the value of 
            the cell being changed.  The cells are listed in the order that they need to be recalculated.</returns>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:SS.InvalidNameException"></exception>
        </member>
        <member name="M:SS.Spreadsheet.SetContentsOfCell(System.String,System.String)">
            <inheritdoc/>
            /// <summary>
            If content is null, throws an ArgumentNullException.
            
            Otherwise, if name is null or invalid, throws an InvalidNameException.
            
            Otherwise, if content parses as a double, the contents of the named
            cell becomes that double.
            
            Otherwise, if content begins with the character '=', an attempt is made
            to parse the remainder of content into a Formula f using the Formula
            constructor.  There are then three possibilities:
            
              (1) If the remainder of content cannot be parsed into a Formula, a 
                  SpreadsheetUtilities.FormulaFormatException is thrown.
                  
              (2) Otherwise, if changing the contents of the named cell to be f
                  would cause a circular dependency, a CircularException is thrown,
                  and no change is made to the spreadsheet.
                  
              (3) Otherwise, the contents of the named cell becomes f.
            
            Otherwise, the contents of the named cell becomes content.
            
            If an exception is not thrown, the method returns a list consisting of
            name plus the names of all other cells whose value depends, directly
            or indirectly, on the named cell. The order of the list should be any
            order such that if cells are re-evaluated in that order, their dependencies 
            are satisfied by the time they are evaluated.
            
            For example, if name is A1, B1 contains A1*2, and C1 contains B1+A1, the
            list {A1, B1, C1} is returned.
            </summary>
        </member>
        <member name="M:SS.Spreadsheet.GetDirectDependents(System.String)">
            <inheritdoc/>
            <param name="name">The name of the cell that is the dependee of all cells returned.</param>
            <returns>Enumeration of direct dependents of given cell</returns>
        </member>
        <member name="M:SS.Spreadsheet.Lookup(System.String)">
            <summary>
            Given the name of a variable, it returns the value of that variable.
            </summary>
            <param name="variable"></param>
            <returns></returns>
        </member>
    </members>
</doc>
